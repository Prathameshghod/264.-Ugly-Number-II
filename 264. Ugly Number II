***************************** 264. Ugly Number II  ****************************************************************************************

# Python Code 

class Solution:
    def nthUglyNumber(self, n: int) -> int:
        # initialise the ugly number list with first ugly number
        ugly = [1]
# initialise the pointers for multiples of 2, 3 and 5       
        i2 = i3 = i5 = 0
    # continue generating ugly numbers until we reach nth one 
    
        while len(ugly) < n:
# calculate the next candidates for ugly numbers 
            next_ugly_2 = ugly[i2] * 2
            next_ugly_3 = ugly[i3] * 3
            next_ugly_5 = ugly[i5] * 5
            
# choose the smallest candidate 
            next_ugly = min(  next_ugly_2 ,  next_ugly_3 , next_ugly_5)
            ugly.append(next_ugly)
             
# icrement the corresponding pointer
            if  next_ugly ==  next_ugly_2:
                i2 += 1
            if  next_ugly ==  next_ugly_3:
                i3 += 1
            if  next_ugly ==  next_ugly_5:
                i5 += 1
# return the nth ugly number 
        return ugly[n-1]


//// C++ Code ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    int nthUglyNumber(int n) {
        // Initialize the ugly number list with the first ugly number
        vector<int> ugly(1, 1);
        
        // Initialize pointers for multiples of 2, 3, and 5
        int i2 = 0, i3 = 0, i5 = 0;
        
        // Continue generating ugly numbers until we reach the nth one
        while (ugly.size() < n) {
            // Calculate the next candidates for ugly numbers
            int next_ugly_2 = ugly[i2] * 2;
            int next_ugly_3 = ugly[i3] * 3;
            int next_ugly_5 = ugly[i5] * 5;
            
            // Choose the smallest candidate
            int next_ugly = min(next_ugly_2, min(next_ugly_3, next_ugly_5));
            ugly.push_back(next_ugly);
            
            // Increment the corresponding pointer(s)
            if (next_ugly == next_ugly_2) i2++;
            if (next_ugly == next_ugly_3) i3++;
            if (next_ugly == next_ugly_5) i5++;
        }
        
        // Return the nth ugly number
        return ugly[n - 1];
    }
};
